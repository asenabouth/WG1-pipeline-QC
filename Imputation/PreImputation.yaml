---
refs:
  # fasta38: /path/to/hg38fasta.fa
  fasta19: /path/to/hg19fasta.fa

inputs:
  singularity_image: /path/to/singularity/image.sif ### The complete path to the singularity image that has all the softwares
  vcf: /path/to/input.vcf ### can be either hg19 or hg38
  pipeline_dir: /path/to/cloned/pipeline/directory ### This is the pipeline that was downloaded with `git clone https://github.com/sc-eQTLgen-consortium/WG1-pipeline-QC.git`
  chromosomes: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X]
  
outputs:
  output_dir: /path/to/parent/out/dir ### The path to the parent dir where you would like all outputs/results saved. The directory does not need to exist - snakemake will make it if it doesn't exist.

options:
  ref: hg38 ### Reference that your input vcf is on (the array reference) either hg38 or hg19
  sex_checked: False ### Logical (True or False) Indicacte whether you want to correct sex assignments based on incorrect assignments
  individual_ancestries_checked: False ### Logical (True or False); Indicate whether you agree with the assignments provided by the gtm projection. If you don't agree and need to do more individual filtering so only the individuals you want are in the files


##### These are the options that will be used for plink QC steps #####
plink_QC:
  ### If the vcf if on an hg38 reference, we need to liftover to hg19 using picard - this will only happen if the ref in the options categoray above is set to hg38
  hg38_liftover_memory: 20 ### Amount of gigs that will be used for memory and disk space per thread
  hg38_liftover_threads: 10 ### Number of threads to use

  ### Following options for converting vcf to plink with `plink --vcf <vcf> --fam <fam_file> --make-bed --out <out>`
  fam_file: /path/to/file.fam ### Path to a fam file in plink format per https://www.cog-genomics.org/plink2/formats#fam with the following columns (UNLABLED): 1. Family ID ('FID'); 2. Within-family ID ('IID'; cannot be '0') 3. Within-family ID of father ('0' if father isn't in dataset) 4. Within-family ID of mother ('0' if mother isn't in dataset) 5. Sex code ('1' = male, '2' = female, '0' = unknown) 6. Phenotype value ('1' = control, '2' = case, '-9'/'0'/non-numeric = missing data if case/control)
  vcf_to_plink_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  vcf_to_plink_threads: 2 ### Number of threads to use

  ### Following options for removing snps that are missing in too many individuals with `plink --bfile <bfile> --make-bed --geno <maf> --out <out> --noweb`
  snp_missingness_snp_rate: 0.03 ### Missingness rate threshold
  snp_missingness_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  snp_missingness_threads: 1 ### Number of threads to use

  ### Following options for removing individuals missing too many snps with `plink --bfile <bfile> --make-bed --mind <mind> --out <out> --noweb`
  indiv_missingness_mind: 0.03 ### Missingness rate threshold
  indiv_missingness_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  indiv_missingness_threads: 1 ### Number of threads to use

  ### Following options for checking the sex reported to the snp-predicted sex with `plink --bfile <bfile> --check-sex --out <out> --noweb`
  check_sex_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  check_sex_threads: 1 ### Number of threads to use

  ### Following options for updating the sexes for any selected individuals with `plink --bfile <bfile> --update-sex <indivs2update> --remove <indivs2remove> --make-bed --out <out>`
  update_sex_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  update_sex_threads: 1 ### Number of threads to use

  ### Following options to remove snps with low maf with `plink --bfile <bfile> --maf <maf> --allow-extra-chr --make-bed --out <out>`
  maf: 0.01 ## MAF threshold to use
  maf_memory: 5 ### Amount of gigs that will be used for memory and disk space per thread
  maf_threads: 1 ### Number of threads to use

  ### Following options to remove snps that fail hwe with `plink --bfile <bfile> --hardy --hwe --make-bed --out <out> --noweb`
  hwe_memory: 5 ### Number of gigs that will be used for memory and disk space per thread
  hwe_threads: 1 ### Number of threads to use

  ### Following options to identify the heterozygosity per individual with `plink --bfile <bfile --het --out <out> --noweb`
  het_memory: 15 ### Amount of gigs that will be used for memory and disk space per thread
  het_threads: 2 ### Number of threads to use
  het_sd: 3 ## Number of sd from mean to allow for heterozygosity. Those that fall outside will be filtered out

  ### Following options to filter individuals that don't fall within heterozygosity acceptable range with `plink --bfile <hwe> --remove <individuals> --make-bed --out <out> --noweb`
  het_filter_memory: 5
  het_filter_threads: 1


##### These are the options that will be used for the grm_QC steps #####
grm_QC:
  ### Following options to make grm with `gcta64 --bfile <bfile> --make-grm --out <out>` (first removes Y chromosome snps)
  grm_memory: 10
  grm_threads: 1

  ### Options to identify individuals to filter based on relatedness and calculate pcs with `gcta64 --grm <grm> --grm-cutoff <threshold> --make-grm --out <out>`
  grm_filter_relatednes: 0.125 ## Relatedness threshold cutoff for filtering one of related individuals
  grm_filter_pcs: 6
  grm_filter_memory: 10
  grm_filter_threads: 1

  ### Options to subset based on individuals identified in last step with `plink --bfile <bfile> --keep <ids> --make-bed --out <out>`
  grm_subset_memory: 10
  grm_subset_threads: 1

HRC_check:
  ### Options to get all SNPs on forward strand
  forward_strand_memory: 10
  forward_strand_threads: 1

  ### Options to use for hrc check ewith `perl HRC-1000G-check-bim.pl -b <bfile> -f <frequencies> -r /opt/HRC.r1-1.GRCh37.wgs.mac5.sites.tab -h -o <out>`
  hrc_check_memory: 20
  hrc_check_threads: 1

  ### Options to use for fixing identified issues from hrc check `sh Run-plink.sh`
  hrc_fix_memory: 15
  hrc_fix_threads: 2


##### These are the options that will be used for the GTM steps to detect individual ancestries #####
GTM_ancestry:
  ### Options to use for gtm_preprocessing with `plink --bfile <bfile> --indep-pairwise 1000 10 0.02 --maf 0.05 --out <out> --make-bed` (also remove MHC region on chromosome 6 - just for ancestry detection and plotting)
  gtm_preprocess_memory: 10
  gtm_preprocess_threads: 1

  ### Options to use for pruning SNPs prior to gtm running with `plink --bfile <bfile> --extract < --out <out> --make-bed`
  gtm_prune_memory: 10
  gtm_prune_threads: 1

  ### Options to use for merging results and making a mat file for gtm input with `plink --merge-list <list> --recodeA --out <out`
  gtm_merge_memory: 5
  gtm_merge_threads: 1

  ### Options for projection of data into 1000G space
  gtm_projection_memory: 10
  gtm_projection_threads: 2

  ### Options for separating ethnicities into european and non-european
  separate_ethnicities_memory: 2
  separate_ethnicities_threads: 1


##### These are the options that will be used for preparing the final vcf #####
final_vcf:
  ### Options for converting europeaen bed to vcf (only run if individuals in european file) with `plink --bfile <input> --recode --keep <european_individuals> vcf --out <output>`
  bed2vcf_european_memory: 10
  bed2vcf_european_threads: 1

  ### Options for sorting european final vcf (only run if individuals in european file) with `bcftools sort <input> -Oz -o <output>
  european_vcf_sort_memory: 10
  european_vcf_sort_threads: 1

  ### Options for converting non-european bed to vcf (only run if individuals in the non-european file) with `plink european_vcf_sort`
  bed2vcf_non_european_memory: 10
  bed2vcf_non_european_threads: 1

  ### Options for sorting final non-eruopean vcf (only run if individuals in non-european file) with `bcftools sort <input> -Oz -o <output>
  european_vcf_sort_memory: 10
  european_vcf_sort_threads: 1

